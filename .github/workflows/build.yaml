name: Gspcoin Build
on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - develop
env:
  COIN_NAME: gspcoin
  BUILD_DIR: gspcoin-build
  COMPRESS_DIR: gspcoin-compress
  TEST_LOG_ARTIFACT_DIR: test-logs
jobs:
  checking-build-version:
    name: Checking Build Versioning
    runs-on: ubuntu-20.04
    outputs:
      workflow_id: ${{ github.run_id }}
    steps:
      - name: Trigger by
        run: |
          echo "checking out $GITHUB_REF trigger by $GITHUB_EVENT_NAME"
      - name: Checkout
        uses: actions/checkout@v2
      - name: Read build.properties key for master
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master'}}
        id: release-version
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: build.properties
          property: 'release-version'
      - name: Read build.properties key for develop
        if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'}}
        id: snapshot-version
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: build.properties
          property: 'snapshot-version'
      - name: create version
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master'}}
        run: |
          echo "BUILD_VERSION=${{ steps.release-version.outputs.value }}" > version.txt
      - name: create snapshot version
        if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'}}
        run: |
          echo "BUILD_VERSION=${{ steps.snapshot-version.outputs.value }}" > version.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
  build-ubuntu-18:
    name: Build Ubuntu 18.04
    needs: checking-build-version
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          run_id: ${{ needs.checking-build-version.outputs.workflow_id }}
          path: version
      - name: Check if artifact is downloaded
        run: |
            if [ -f version/version.txt ]; then
              echo "version artifact found"
            else
              echo "version artifact not found"
              exit 1
            fi
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Set Up Environment
        run: |
          echo "Building on ubuntu-18.04"
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake libssl-dev
      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc)
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/x86_64-pc-linux-gnu
      - name: Build Binary
        run: |
          make -j$(nproc) || { echo "make failed"; exit 1; }
          mkdir -p $BUILD_DIR
          mv src/{gspcoin-cli,gspcoin-tx,gspcoind,qt/gspcoin-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: Generate Checksums and Compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          shasum gspcoin-cli >> checksums.txt
          sha256sum gspcoin-cli >> checksums.txt
          shasum gspcoind >> checksums.txt
          sha256sum gspcoind >> checksums.txt
          shasum gspcoin-tx >> checksums.txt
          sha256sum gspcoin-tx >> checksums.txt
          shasum gspcoin-qt >> checksums.txt
          sha256sum gspcoin-qt >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu18-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu18-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu18-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu18-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu18-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

  build-ubuntu-20:
    name: Build Ubuntu 20.04
    needs: checking-build-version
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          run_id: ${{ needs.checking-build-version.outputs.workflow_id }}
          path: version
      - name: Check if artifact is downloaded
        run: |
            if [ -f version/version.txt ]; then
              echo "version artifact found"
            else
              echo "version artifact not found"
              exit 1
            fi
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Set Up Environment
        run: |
          echo "Building on ubuntu-20.04"
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc)
      - name: Patch ZMQ
        run: |
          cd depends
          find ./work/build/x86_64-pc-linux-gnu/zeromq/ -maxdepth 1 -type d -name "4.3.4-*" -print0 | while IFS= read -r -d $'\0' dir; do
            echo "Patching ZMQ in: $dir"
            cd "$dir"
            wget https://gist.githubusercontent.com/thegokudragon/889591897b527a924b0950227e30a1b6/raw/67f4c44409e514b21544f091624a6a26f04cb70d/zmq_strncpy_fix.patch
            patch -p0 < zmq_strncpy_fix.patch
            cd ../../../../../
          done
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/x86_64-pc-linux-gnu
      - name: Build Binary
        run: |
          make -j$(nproc) || { echo "make failed"; exit 1; }
          mkdir -p $BUILD_DIR
          mv src/{gspcoin-cli,gspcoin-tx,gspcoind,qt/gspcoin-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: Generate Checksums and Compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          shasum gspcoin-cli >> checksums.txt
          sha256sum gspcoin-cli >> checksums.txt
          shasum gspcoind >> checksums.txt
          sha256sum gspcoind >> checksums.txt
          shasum gspcoin-tx >> checksums.txt
          sha256sum gspcoin-tx >> checksums.txt
          shasum gspcoin-qt >> checksums.txt
          sha256sum gspcoin-qt >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
  build-ubuntu-22:
    name: Build Ubuntu 22.04
    needs: checking-build-version
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          run_id: ${{ needs.checking-build-version.outputs.workflow_id }}
          path: version
      - name: Check if artifact is downloaded
        run: |
            if [ -f version/version.txt ]; then
              echo "version artifact found"
            else
              echo "version artifact not found"
              exit 1
            fi
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Set Up Environment
        run: |
          echo "Building on ubuntu-22.04"
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc)
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/x86_64-pc-linux-gnu
      - name: Build Binary
        run: |
          make -j$(nproc) || { echo "make failed"; exit 1; }
          mkdir -p $BUILD_DIR
          mv src/{gspcoin-cli,gspcoin-tx,gspcoind,qt/gspcoin-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: Generate Checksums and Compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          shasum gspcoin-cli >> checksums.txt
          sha256sum gspcoin-cli >> checksums.txt
          shasum gspcoind >> checksums.txt
          sha256sum gspcoind >> checksums.txt
          shasum gspcoin-tx >> checksums.txt
          sha256sum gspcoin-tx >> checksums.txt
          shasum gspcoin-qt >> checksums.txt
          sha256sum gspcoin-qt >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu22-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu22-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu22-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu22-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
      - name: Patch QT
        run: |
          cd depends
          find ./work/build/x86_64-pc-linux-gnu/qt/ -maxdepth 1 -type d -name "5.15.5-*" -print0 | while IFS= read -r -d $'\0' dir; do
            echo "Patching QT in: $dir"
            cd "$dir/qtbase"
            wget https://gist.githubusercontent.com/thegokudragon/b4aa48d7354343d8713091d746d11c32/raw/7773d9578c4e6f2a9e955e597324d7d7433e3461/qt_module.patch
            patch -p0 < qt_module.patch
            cd ../../../../../
          done
  build-ubuntu-24:
    name: Build Ubuntu 24.04
    needs: checking-build-version
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          run_id: ${{ needs.checking-build-version.outputs.workflow_id }}
          path: version
      - name: Check if artifact is downloaded
        run: |
            if [ -f version/version.txt ]; then
              echo "version artifact found"
            else
              echo "version artifact not found"
              exit 1
            fi
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Set Up Environment
        run: |
          echo "Building on ubuntu-24.04"
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc)
      - name: Patch ZMQ
        run: |
          cd depends
          find ./work/build/x86_64-pc-linux-gnu/zeromq/ -maxdepth 1 -type d -name "4.3.4-*" -print0 | while IFS= read -r -d $'\0' dir; do
            echo "Patching ZMQ in: $dir"
            cd "$dir"
            wget https://gist.githubusercontent.com/thegokudragon/889591897b527a924b0950227e30a1b6/raw/67f4c44409e514b21544f091624a6a26f04cb70d/zmq_strncpy_fix.patch
            patch -p0 < zmq_strncpy_fix.patch
            cd ../../../../../
          done
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/x86_64-pc-linux-gnu
      - name: Build Binary
        run: |
          make -j$(nproc) || { echo "make failed"; exit 1; }
          mkdir -p $BUILD_DIR
          mv src/{gspcoin-cli,gspcoin-tx,gspcoind,qt/gspcoin-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: Generate Checksums and Compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          shasum gspcoin-cli >> checksums.txt
          sha256sum gspcoin-cli >> checksums.txt
          shasum gspcoind >> checksums.txt
          sha256sum gspcoind >> checksums.txt
          shasum gspcoin-tx >> checksums.txt
          sha256sum gspcoin-tx >> checksums.txt
          shasum gspcoin-qt >> checksums.txt
          sha256sum gspcoin-qt >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu24-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu24-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu24-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu24-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu24-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
      - name: Patch xcb_proto
        run: |
          cd depends
          find ./work/build/x86_64-pc-linux-gnu/xcb_proto/ -maxdepth 1 -type d -name "1.14.1-*" -print0 | while IFS= read -r -d $'\0' dir; do
           echo "Patching xcb_proto in: $dir"
           cd "$dir/xcbgen"
           sed -i 's/import imp/import importlib.util as imp/g'  __init__.py error.py expr.py align.py matcher.py state.py xtypes.py
           cd ../../../../../
          done
  build-macos:
    name: macOS Build
    needs: checking-build-version
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          run_id: ${{ needs.checking-build-version.outputs.workflow_id }}
          path: version
      - name: Check if artifact is downloaded
        run: |
            if [ -f version/version.txt ]; then
              echo "version artifact found"
            else
              echo "version artifact not found"
              exit 1
            fi
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python
      - name: create python virtual environment and install modules
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip3 install ds_store mac_alias
      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j8
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/x86_64-apple-darwin19.6.0
      - name: Build Binary
        run: |
          make -j8 || { echo "make failed"; exit 1; }
          mkdir -p $BUILD_DIR
          mv src/{gspcoin-cli,gspcoin-tx,gspcoind,qt/gspcoin-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: Generate Checksums and Compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          shasum gspcoin-cli >> checksums.txt
          openssl sha256 gspcoin-cli >> checksums.txt
          shasum gspcoind >> checksums.txt
          openssl sha256 gspcoind >> checksums.txt
          shasum gspcoin-tx >> checksums.txt
          openssl sha256 gspcoin-tx >> checksums.txt
          openssl sha256 gspcoin-qt >> checksums.txt
          openssl sha256 gspcoin-qt >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          openssl sha256 ${COMPRESS_DIR}/${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-macos-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
      - name: Generate Macos dmg files
        run: |
          make deploy
      - name: Upload dmg file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-dmg-${{ env.BUILD_VERSION }}
          path: Gspcoin-Qt.dmg
  build-windows:
    name: Windows Build
    needs: checking-build-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          run_id: ${{ needs.checking-build-version.outputs.workflow_id }}
          path: version
      - name: Check if artifact is downloaded
        run: |
            if [ -f version/version.txt ]; then
              echo "version artifact found"
            else
              echo "version artifact not found"
              exit 1
            fi
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
          sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc) HOST=x86_64-w64-mingw32
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/x86_64-w64-mingw32
      - name: Build Binary
        run: |
          make -j$(nproc) || { echo "make failed"; exit 1; }
          mkdir -p $BUILD_DIR
          mv src/{gspcoin-cli.exe,gspcoin-tx.exe,gspcoind.exe,qt/gspcoin-qt.exe} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: Generate Checksums and Compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          shasum gspcoin-cli.exe >> checksums.txt
          sha256sum gspcoin-cli.exe >> checksums.txt
          shasum gspcoind.exe >> checksums.txt
          sha256sum gspcoind.exe >> checksums.txt
          shasum gspcoin-tx.exe >> checksums.txt
          sha256sum gspcoin-tx.exe >> checksums.txt
          shasum gspcoin-qt.exe >> checksums.txt
          sha256sum gspcoin-qt.exe >> checksums.txt
          cat checksums.txt
          cd ..
          zip -r ${COIN_NAME}-win-${BUILD_VERSION}.zip $BUILD_DIR/
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-win-${BUILD_VERSION}.zip ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-win-${BUILD_VERSION}.zip >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-win-${BUILD_VERSION}.zip >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-win-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
      - name: Patch QT
        run: |
          cd depends
          find ./work/build/x86_64-w64-mingw32/qt/ -maxdepth 1 -type d -name "5.15.5-*" -print0 | while IFS= read -r -d $'\0' dir; do
            echo "Patching QT in: $dir"
            cd "$dir/qtbase"
            wget https://gist.githubusercontent.com/thegokudragon/b4aa48d7354343d8713091d746d11c32/raw/7773d9578c4e6f2a9e955e597324d7d7433e3461/qt_module.patch
            patch -p0 < qt_module.patch
            cd ../../../../../
           done

  build-linux-arm:
    name: Linux ARM Build
    needs: checking-build-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          run_id: ${{ needs.checking-build-version.outputs.workflow_id }}
          path: version
      - name: Check if artifact is downloaded
        run: |
            if [ -f version/version.txt ]; then
              echo "version artifact found"
            else
              echo "version artifact not found"
              exit 1
            fi
      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc) HOST=arm-linux-gnueabihf
      - name: Patch xcb_proto
        run: |
          cd depends
          find ./work/build/arm-linux-gnueabihf/xcb_proto/ -maxdepth 1 -type d -name "1.14.1-*" -print0 | while IFS= read -r -d $'\0' dir; do
           echo "Patching xcb_proto in: $dir"
           cd "$dir/xcbgen"
           sed -i 's/import imp/import importlib.util as imp/g'  __init__.py error.py expr.py align.py matcher.py state.py xtypes.py
           cd ../../../../../
          done
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/arm-linux-gnueabihf
      - name: Build Binary
        run: |
          make -j$(nproc) || { echo "make failed"; exit 1; }
          mkdir -p $BUILD_DIR
          mv src/{gspcoin-cli,gspcoin-tx,gspcoind,qt/gspcoin-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: Generate Checksums and Compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          shasum gspcoin-cli >> checksums.txt
          sha256sum gspcoin-cli >> checksums.txt
          shasum gspcoind >> checksums.txt
          sha256sum gspcoind >> checksums.txt
          shasum gspcoin-tx >> checksums.txt
          sha256sum gspcoin-tx >> checksums.txt
          shasum gspcoin-qt >> checksums.txt
          sha256sum gspcoin-qt >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-linux-arm-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-linux-arm-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-linux-arm-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-linux-arm-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-linux-arm-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
