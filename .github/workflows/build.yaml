name: GSP Coin Build
on:
  push:
    branches:
      - master
      - develop
      - "ft/*"
      - "bug/*"
      - "release/*"
  pull_request:
    branches:
      - develop
  workflow_dispatch:

env:
  COIN_NAME: gspcoin
  BUILD_DIR: gspcoin-build
  COMPRESS_DIR: gspcoin-compress
  TEST_DIR: gspcoin-test

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - name: Triggered By
        run: |
          echo "checking out $GITHUB_REF triggered by $GITHUB_EVENT_NAME"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Read versions
        id: versions
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: "release-version candidate-version snapshot-version"

      - name: Choose version
        id: selected-version
        shell: bash
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]] || [[ "$GITHUB_REF" == *ft/* ]] || [[ "$GITHUB_REF" == *bug/* ]]; then
              version=${{ steps.versions.outputs.snapshot-version }}
          elif [[ "$GITHUB_EVENT_NAME" != "pull_request" ]] && [[ "$GITHUB_REF" == *"release/"* ]]; then
              version=${{ steps.versions.outputs.candidate-version }}
          elif [[ "$GITHUB_EVENT_NAME" != "pull_request" ]] && [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
              version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version is: [$version]"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$version" > version.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

    outputs:
      version: ${{ steps.selected-version.outputs.version }}

  build-ubuntu20:
    name: Ubuntu 20 Build
    needs: get-version
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get install curl libcurl4-openssl-dev build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake -y

      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          gcc --version
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          make -C depends -j$(nproc) HOST=x86_64-pc-linux-gnu

      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p ${BUILD_DIR} ${BUILD_DIR}_not_strip ${TEST_DIR}
          cp src/{gspcoin-cli,gspcoind,qt/gspcoin-qt} ${BUILD_DIR}/
          mv src/{gspcoin-cli,gspcoind,qt/gspcoin-qt} ${BUILD_DIR}_not_strip/
          mv src/test/test_gspcoin ${TEST_DIR}
          strip ${BUILD_DIR}/*

      - name: Build Debug Binaries
        run: |
          make clean
          make distclean
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu --disable-tests --enable-debug --enable-crash-hooks
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}_debug
          mv src/{gspcoin-cli,gspcoind,qt/gspcoin-qt} ${BUILD_DIR}_debug/

      - name: Generate Checksum and Compress
        run: |
          mkdir -p ${COMPRESS_DIR}
          cd ${BUILD_DIR}
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu20-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ../${BUILD_DIR}_debug
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu20-debug-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ../${BUILD_DIR}_not_strip
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu20-not_strip-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ..
          mv *.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-ubuntu20-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu20-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu20-not_strip-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-not_strip-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          cd ..
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-${{ needs.get-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-test-${{ needs.get-version.outputs.version }}
          path: ${{ env.TEST_DIR }}

  test-ubuntu20:
    name: Ubuntu 20 Tests
    needs: [get-version, build-ubuntu20]
    runs-on: ubuntu-20.04

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-test-${{ needs.get-version.outputs.version }}

      - name: Run Unit Tests
        id: Tests
        run: |
          chmod +x test_gspcoin
          ./test_gspcoin --log_format=JUNIT > unit_test_results.xml

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-test-${{ needs.get-version.outputs.version }}
          path: unit_test_results.xml

      - name: Publish Unit Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          check_name: "Ubuntu 20"
          detailed_summary: ${{ steps.Tests.conclusion == 'failure'}}
          include_passed: false
          report_paths: "unit_test_results.xml"

  build-ubuntu22:
    name: Ubuntu 22 Build
    needs: get-version
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get install curl libcurl4-openssl-dev build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake -y

      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          gcc --version
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          make -C depends -j$(nproc) HOST=x86_64-pc-linux-gnu

      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p ${BUILD_DIR} ${BUILD_DIR}_not_strip ${TEST_DIR}
          cp src/{gspcoin-cli,gspcoind,qt/gspcoin-qt} ${BUILD_DIR}/
          mv src/{gspcoin-cli,gspcoind,qt/gspcoin-qt} ${BUILD_DIR}_not_strip/
          mv src/test/test_gspcoin ${TEST_DIR}
          strip ${BUILD_DIR}/*

      - name: Build Debug Binaries
        run: |
          make clean
          make distclean
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu --disable-tests --enable-debug --enable-crash-hooks
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}_debug
          mv src/{gspcoin-cli,gspcoind,qt/gspcoin-qt} ${BUILD_DIR}_debug/

      - name: Generate Checksum and Compress
        run: |
          mkdir -p ${COMPRESS_DIR}
          cd ${BUILD_DIR}
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ../${BUILD_DIR}_debug
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-debug-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ../${BUILD_DIR}_not_strip
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-not_strip-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ..
          mv *.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu22-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu22-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-not_strip-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu22-not_strip-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          cd ..
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-${{ needs.get-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-test-${{ needs.get-version.outputs.version }}
          path: ${{ env.TEST_DIR }}

  test-ubuntu22:
    name: Ubuntu 22 Tests
    needs: [get-version, build-ubuntu22]
    runs-on: ubuntu-22.04

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-test-${{ needs.get-version.outputs.version }}

      - name: Run Unit Tests
        id: Tests
        run: |
          chmod +x test_gspcoin
          ./test_gspcoin --log_format=JUNIT > unit_test_results.xml

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-test-${{ needs.get-version.outputs.version }}
          path: unit_test_results.xml

      - name: Publish Unit Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          check_name: "Ubuntu 22"
          detailed_summary: ${{ steps.Tests.conclusion == 'failure'}}
          include_passed: false
          report_paths: "unit_test_results.xml"
