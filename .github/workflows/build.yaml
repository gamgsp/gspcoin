---
name: Gspcoin Build

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - develop

env:
  COIN_NAME: gspcoin
  BUILD_DIR: gspcoin-build
  COMPRESS_DIR: gspcoin-compress
  TEST_LOG_ARTIFACT_DIR: test-logs

jobs:
  checking-build-version:
    name: Checking Build Versioning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Read build.properties for master
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master' }}
        id: release-version
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: build.properties
          property: 'release-version'
      - name: Read build.properties for develop
        if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/develop' }}
        id: snapshot-version
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: build.properties
          property: 'snapshot-version'
      - name: Create version
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master' }}
        run: |
          echo "BUILD_VERSION=${{ steps.release-version.outputs.value }}" > version/version.txt
      - name: Create snapshot version
        if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/develop' }}
        run: |
          echo "BUILD_VERSION=${{ steps.snapshot-version.outputs.value }}" > version/version.txt
      - name: Check if version.txt exists
        run: |
          if [ -f version/version.txt ]; then echo "File exists"; else echo "File does not exist"; fi
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version/version.txt

  ubuntu-build:
    name: Ubuntu Build Matrix
    needs: checking-build-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Getting Version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Check if version.txt exists
        run: |
          if [ -f version/version.txt ]; then echo "File exists"; else echo "File does not exist"; fi
      - name: Extract Version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake git
          sudo apt-get install -y libboost-all-dev libssl-dev libevent-dev libzmq3-dev libminiupnpc-dev libsodium-dev libgmp-dev
          sudo apt-get install -y libprotobuf-dev protobuf-compiler libqrencode-dev
          dpkg -l  # List installed packages for debugging
      - name: Build Depends
        run: |
          echo "Building with $(nproc) threads"
          make -C depends -j$(nproc)
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu
      - name: Build Binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{gspcoin-cli,gspcoin-tx,gspcoind,qt/gspcoin-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: Generate Checksum and Compress
        run: |
          cd $BUILD_DIR
          shasum * > checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu-${{ matrix.os }}-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu-${{ matrix.os }}-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu-${{ matrix.os }}-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

  windows-build:
    name: Windows Build
    needs: checking-build-version
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Getting Version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Extract Version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          choco install mingw
      - name: Build Depends
        run: |
          make -C depends -j$(nproc) HOST=x86_64-w64-mingw32
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32
      - name: Build Binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{gspcoin-cli.exe,gspcoin-tx.exe,gspcoind.exe,qt/gspcoin-qt.exe} $BUILD_DIR/
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-win-${{ env.BUILD_VERSION }}
          path: ${{ env.BUILD_DIR }}

  macos-build:
    name: MacOS Build
    needs: checking-build-version
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Getting Version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Extract Version
        run: |
          cat version/version.txt >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python
      - name: Build Depends
        run: |
          make -C depends -j8
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu
