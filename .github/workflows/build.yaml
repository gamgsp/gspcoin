---
name: Gspcoin Build
on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - develop
env:
  COIN_NAME: gspcoin
  BUILD_DIR: gspcoin-build
  COMPRESS_DIR: gspcoin-compress
  TEST_LOG_ARTIFACT_DIR: test-logs

jobs:
  checking-build-version:
    name: Checking Build Versioning
    runs-on: ubuntu-latest
    steps:
      - name: Trigger by
        run: |
          echo "checking out $GITHUB_REF triggered by $GITHUB_EVENT_NAME"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read build.properties key for master
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master' }}
        id: release-version
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: build.properties
          property: 'release-version'
      - name: Read build.properties key for develop
        if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/develop' }}
        id: snapshot-version
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: build.properties
          property: 'snapshot-version'
      - name: Create version
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master' }}
        run: |
          echo "BUILD_VERSION=${{ steps.release-version.outputs.value }}" >> $GITHUB_ENV
          echo "${{ steps.release-version.outputs.value }}" > version.txt
      - name: Create snapshot version
        if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/develop' }}
        run: |
          echo "BUILD_VERSION=${{ steps.snapshot-version.outputs.value }}" >> $GITHUB_ENV
          echo "${{ steps.snapshot-version.outputs.value }}" > version.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

  build:
    name: Build on ${{ matrix.os }}
    needs: checking-build-version
    strategy:
      fail-fast: false # Prevent other jobs from being canceled if one fails
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version
          path: version
      - name: Extract version
        run: |
          echo "BUILD_VERSION=$(cat version/version.txt)" >> $GITHUB_ENV
      - name: Install Required Packages
        run: |
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            sudo apt-get update -y
            sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python
            pip3 install ds_store mac_alias
          elif [[ "${{ matrix.os }}" == windows* ]]; then
            choco install -y make mingw
          fi
      - name: Build Depends
        run: |
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            make -C depends -j$(nproc)
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            make -C depends -j8
          elif [[ "${{ matrix.os }}" == windows* ]]; then
            make -C depends -j$(nproc) HOST=x86_64-w64-mingw32
          fi
      - name: Configure
        run: |
          ./autogen.sh
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            ./configure --prefix=`pwd`/depends/x86_64-apple-darwin19.6.0
          elif [[ "${{ matrix.os }}" == windows* ]]; then
            ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32
          fi
      - name: Build Binary
        run: |
          if [[ "${{ matrix.os }}" == ubuntu* || "${{ matrix.os }}" == macos* ]]; then
            make -j$(nproc)
          elif [[ "${{ matrix.os }}" == windows* ]]; then
            make -j$(nproc)
          fi
          mkdir -p $BUILD_DIR
          if [[ "${{ matrix.os }}" == ubuntu* || "${{ matrix.os }}" == macos* ]]; then
            mv src/{gspcoin-cli,gspcoin-tx,gspcoind,qt/gspcoin-qt} $BUILD_DIR/
            strip $BUILD_DIR/*
          elif [[ "${{ matrix.os }}" == windows* ]]; then
            mv src/{gspcoin-cli.exe,gspcoin-tx.exe,gspcoind.exe,qt/gspcoin-qt.exe} $BUILD_DIR/
            strip $BUILD_DIR/*
          fi
      - name: Generate Checksum and Compress
        run: |
          echo "Building $BUILD_VERSION version"
          cd $BUILD_DIR
          if [[ "${{ matrix.os }}" == ubuntu* || "${{ matrix.os }}" == macos* ]]; then
            shasum gspcoin-cli >> checksums.txt
            sha256sum gspcoin-cli >> checksums.txt
            shasum gspcoind >> checksums.txt
            sha256sum gspcoind >> checksums.txt
            shasum gspcoin-tx >> checksums.txt
            sha256sum gspcoin-tx >> checksums.txt
            shasum gspcoin-qt >> checksums.txt
            sha256sum gspcoin-qt >> checksums.txt
          elif [[ "${{ matrix.os }}" == windows* ]]; then
            shasum gspcoin-cli.exe >> checksums.txt
            sha256sum gspcoin-cli.exe >> checksums.txt
            shasum gspcoind.exe >> checksums.txt
            sha256sum gspcoind.exe >> checksums.txt
            shasum gspcoin-tx.exe >> checksums.txt
            sha256sum gspcoin-tx.exe >> checksums.txt
            shasum gspcoin-qt.exe >> checksums.txt
            sha256sum gspcoin-qt.exe >> checksums.txt
          fi
          cat checksums.txt
          cd ..
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            tar -cvzf ${COIN_NAME}-${{ matrix.os }}-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            tar -cvzf ${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          elif [[ "${{ matrix.os }}" == windows* ]]; then
            zip -r ${COIN_NAME}-win-${BUILD_VERSION}.zip $BUILD_DIR/
          fi
          mkdir -p ${COMPRESS_DIR}
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            mv ${COIN_NAME}-${{ matrix.os }}-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            mv ${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          elif [[ "${{ matrix.os }}" == windows* ]]; then
            mv ${COIN_NAME}-win-${BUILD_VERSION}.zip ${COMPRESS_DIR}/
          fi
          shasum ${COMPRESS_DIR}/* >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/* >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-${{ matrix.os }}-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
